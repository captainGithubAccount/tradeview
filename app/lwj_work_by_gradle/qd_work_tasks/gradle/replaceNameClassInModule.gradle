apply from: '../app/lwj_work_by_gradle/qd_work_tasks/fun/base.gradle'


/**
 * author: lwj 
 * create time: 2024-6-12
 * */

ext.replaceNameClassInModule = {proModelName, oldQz->
    replaceNameClassInModule('.java', proModelName, oldQz )
    replaceNameClassInModule('.kt', proModelName, oldQz)
}

private def replaceNameClassInModule(String suffix, String modelName, String oldQz) {
    isNeedRefreshCache = true
    def word = randomWord()
    word = word[0].toUpperCase() + word[1..-1]
//    def moduleName = ":app"
//    def root_dir = project(moduleName).projectDir.absolutePath + "/src/main/java/com/juyi/battery/infinite/master/aapter/"
    def root_dir = System.getProperty("user.dir") + "/${modelName}/src/main/java/"
    def files = fileTree(root_dir).include("**/*$suffix")
    files = files.sort { -it.name.length() }
    files.each { itemsFile ->
        def noSuffixName = (itemsFile.name).split("\\.")[0]
        //BKAQIBeanatxx
        def isContinue = noSuffixName != 'App'
                && noSuffixName != 'Utils'
                && !itemsFile.name.contains('CommonListFragment')
        if (isContinue &&  (itemsFile.name.endsWith('.java') || itemsFile.name.endsWith('.kt'))) {
            println("TAG-->>name-->>>:  " + itemsFile.name)
//                    def randomStringPath2 = randomString(5)
//            def randomStringPath2 = randomWord()//这里不用randomWord()是因为已经跑过了一次修改类名+layout名的脚本，用了这里的单词了已经
            def randomStringPath2 = randomIdWord()
            def startName = noSuffixName
            randomStringPath2 = randomStringPath2[0].toUpperCase() + randomStringPath2[1..-1]
            def endName = ""
            if (itemsFile.name.contains(oldQz)) {
//                endName = word + randomStringPath2
//                itemsFile.renameTo(new File(itemsFile.absolutePath.replace("Blue", endName)))
                endName = replaceFileName(startName, oldQz, word + randomStringPath2)
                itemsFile.renameTo(new File(itemsFile.absolutePath.replace(startName, endName)))

            }else if (itemsFile.name.contains('Firebase') && itemsFile.name.contains('Manager')) {
                endName = "Firebase${randomStringPath2}Manager"
                itemsFile.renameTo(new File(itemsFile.absolutePath.replace(startName, endName)))
            }else if (itemsFile.name.contains('Firebase') && itemsFile.name.contains('Utils')) {
                endName = "Firebase${randomStringPath2}Utils"
                itemsFile.renameTo(new File(itemsFile.absolutePath.replace(startName, endName)))
            }else{
                endName = word + randomStringPath2
                itemsFile.renameTo(new File(itemsFile.absolutePath.replace(startName, endName + "UnknowClass")))
            }

            println("TAG-->>startName:"+startName + "\tendName:" +endName )
            renameNameInModule(startName, endName)
        }
    }

    def lowerOldQz = oldQz.toLowerCase()
    renameAllXmlNameInModule(modelName, modelName, lowerOldQz, word)
}

//替换drawable和layout下面的文件名
//qz: 修改的前缀
private def renameAllXmlNameInModule(String module, String modelName, String oldQz, String newQz) {
    def javaDir = file("${projectDir}/src/main/java")
    def root = file("${System.getProperty("user.dir")}/" + module + "/src/main/")
    root.eachDirRecurse { dir ->
        def drawableDir = new File(dir, 'drawable')
        if (drawableDir.exists() && drawableDir.isDirectory()) {
            // 将drawable文件夹内的文件复制到输出目录
            modifyDrawableRes(drawableDir, modelName, oldQz, newQz)
        }

        def layoutDir = new File(dir, 'layout')
        if (layoutDir.exists() && layoutDir.isDirectory()) {
            // 将drawable文件夹内的文件复制到输出目录
            modifyLayoutRes(layoutDir, modelName, oldQz, newQz)
        }

        def mipmapDir = new File(dir, 'mipmap-xxhdpi')
        if (mipmapDir.exists() && mipmapDir.isDirectory()) {
            // 将drawable文件夹内的文件复制到输出目录
            modifyMipmapRes(mipmapDir, modelName, oldQz, newQz)
        }

        def xmlDir = new File(dir, 'xml')
        if (xmlDir.exists() && xmlDir.isDirectory()) {
            // 将drawable文件夹内的文件复制到输出目录
            modifyXmlRes(xmlDir, modelName, oldQz, newQz)
        }
    }
}

private def modifyDrawableRes(File drawableDir, String modelName, String oldQz, String newQz){
    drawableDir.eachFile { file ->
        if (file.isFile()) {
            def startName = getBaseFileName(file.absolutePath)
            def endName = extractAndRenameFile(startName, oldQz, newQz)
            println "文件名start: $startName"
            println "文件名end: $endName"
            file.renameTo(new File(file.absolutePath.replace(startName, endName)))

            def oldName = "R.drawable."+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName = "R.drawable."+endName
            def oldName2 = "@drawable/"+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName2 = "@drawable/"+endName

            def root_dir = System.getProperty("user.dir") +  "/${modelName}/src/main/"
            fileTree(root_dir).each {itemsFile ->
                fileReader(itemsFile.getPath(), oldName, newName)
                fileReader(itemsFile.getPath(), oldName2, newName2)
            }
        }
    }
}
private def modifyLayoutRes(File drawableDir, String modelName, String oldQz, String newQz){
    drawableDir.eachFile { file ->
        if (file.isFile()) {
            def startName = getBaseFileName(file.absolutePath)
            def endName = extractAndRenameFile(startName, oldQz, newQz)
            println "文件名start: $startName"
            println "文件名end: $endName"
            file.renameTo(new File(file.absolutePath.replace(startName, endName)))

            def oldName = "R.layout."+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName = "R.layout."+endName
            def oldName2 = "@layout/"+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName2 = "@layout/"+endName

            def root_dir = System.getProperty("user.dir") +  "/${modelName}/src/main/"
            fileTree(root_dir).each {itemsFile ->
                fileReader(itemsFile.getPath(), oldName, newName)
                fileReader(itemsFile.getPath(), oldName2, newName2)
            }
        }
    }
}

private def modifyMipmapRes(File drawableDir, String modelName, String oldQz, String newQz){
    drawableDir.eachFile { file ->
        if (file.isFile()) {
            def startName = getBaseFileName(file.absolutePath)
            def endName = extractAndRenameFile(startName, oldQz, newQz)
            println "文件名start: $startName"
            println "文件名end: $endName"
            file.renameTo(new File(file.absolutePath.replace(startName, endName)))

            def oldName = "R.mipmap."+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName = "R.mipmap."+endName
            def oldName2 = "@mipmap/"+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName2 = "@mipmap/"+endName

            def root_dir = System.getProperty("user.dir") +  "/${modelName}/src/main/"
            fileTree(root_dir).each {itemsFile ->
                fileReader(itemsFile.getPath(), oldName, newName)
                fileReader(itemsFile.getPath(), oldName2, newName2)
            }
        }
    }
}

private def modifyXmlRes(File drawableDir, String modelName, String oldQz, String newQz){
    drawableDir.eachFile { file ->
        if (file.isFile()) {
            def startName = getBaseFileName(file.absolutePath)
            def endName = extractAndRenameFile(startName, oldQz, newQz)
            println "文件名start: $startName"
            println "文件名end: $endName"
            file.renameTo(new File(file.absolutePath.replace(startName, endName)))

            def oldName = "R.xml."+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName = "R.xml."+endName
            def oldName2 = "@xml/"+file.name.substring(0, file.name.lastIndexOf('.'))
            def newName2 = "@xml/"+endName

            def root_dir = System.getProperty("user.dir") +  "/${modelName}/src/main/"
            fileTree(root_dir).each {itemsFile ->
                fileReader(itemsFile.getPath(), oldName, newName)
                fileReader(itemsFile.getPath(), oldName2, newName2)
            }
        }
    }
}

//======================

// 仅提取文件名（不带扩展名）
def getBaseFileName(String filePath) {
    return new File(filePath).name.replaceFirst(~/\.[^\.]+$/, "")
}

// 定义函数从路径中提取文件名并重命名
def extractAndRenameFile(String filePath, String oldName, String newName) {
    // 从路径中提取文件名（不带扩展名）
    def fileName = new File(filePath).name.replaceFirst(~/\.[^\.]+$/, "")

    // 替换文件名中的指定部分
    def newFileName = fileName.replace(oldName, newName).toLowerCase()

    return newFileName
}



// 在build.gradle文件中定义函数
def renameXmlFile(String fileName, String oldName, String newName) {
    // 替换文件名中的指定部分并转为小写
    def newFileName = fileName.replace(oldName, newName).toLowerCase()
    return newFileName
}


// 定义替换函数
def replaceFileName(String fileName, String oldPart, String newPart) {
    // 使用正则表达式匹配以oldPart开头的文件名，并替换为newPart
    def replaced = fileName.replaceAll(~"^${oldPart}", newPart)
    return replaced
}

def renameNameInModule(String oldName, String newName){
    //之所以要三个是防止脚本过于耗时
    def root_dir = System.getProperty("user.dir") /*+ "/notiModel/src/main/java/"*/
    fileTree(root_dir).each {itemsFile ->
        fileReader(itemsFile.getPath(), oldName, newName)
    }
}




